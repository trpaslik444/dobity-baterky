<?php
/**
 * Test p≈ôesnosti Mapy.com API - kontrola GPS a adres
 * Spustit: php test-mapy-accuracy.php
 */

// Naƒçten√≠ WordPress
require_once '/Users/ondraplas/Local Sites/dobity-baterky-dev/app/public/wp-load.php';

if (!defined('WP_CLI')) {
    define('WP_CLI', true);
}

echo "=== Test p≈ôesnosti Mapy.com API ===\n\n";

// Inicializace
$chargingService = new DB\Services\Db_Charging_Service();

/**
 * V√Ωpoƒçet vzd√°lenosti mezi dvƒõma body v metrech
 */
function calculateDistance(float $lat1, float $lon1, float $lat2, float $lon2): float {
    $earthRadius = 6371000; // metry
    
    $dLat = deg2rad($lat2 - $lat1);
    $dLon = deg2rad($lon2 - $lon1);
    
    $a = sin($dLat/2) * sin($dLat/2) +
         cos(deg2rad($lat1)) * cos(deg2rad($lat2)) *
         sin($dLon/2) * sin($dLon/2);
    
    $c = 2 * atan2(sqrt($a), sqrt(1-$a));
    
    return $earthRadius * $c;
}

/**
 * Porovn√°n√≠ adres - jednoduch√° kontrola shody
 */
function compareAddresses(string $address1, string $address2): array {
    $addr1 = strtolower(trim($address1));
    $addr2 = strtolower(trim($address2));
    
    // Odstranƒõn√≠ bƒõ≈æn√Ωch slov
    $removeWords = ['ƒçesko', 'czech republic', 'cz-', 'psƒç'];
    foreach ($removeWords as $word) {
        $addr1 = str_replace($word, '', $addr1);
        $addr2 = str_replace($word, '', $addr2);
    }
    
    // Porovn√°n√≠ podobnosti
    $similarity = 0;
    similar_text($addr1, $addr2, $similarity);
    
    return [
        'similarity' => $similarity,
        'is_match' => $similarity > 70, // 70% shoda
        'addr1_clean' => $addr1,
        'addr2_clean' => $addr2
    ];
}

// Test 1: Naƒçten√≠ nab√≠jec√≠ch stanic z datab√°ze
echo "1. NAƒåTEN√ç NAB√çJEC√çCH STANIC Z DATAB√ÅZE\n";
echo "=======================================\n";

$chargingStations = get_posts([
    'post_type' => 'charging_location',
    'posts_per_page' => 10, // V√≠ce stanic pro lep≈°√≠ test
    'post_status' => 'publish',
    'meta_query' => [
        [
            'key' => '_db_lat',
            'compare' => 'EXISTS'
        ],
        [
            'key' => '_db_lng',
            'compare' => 'EXISTS'
        ]
    ]
]);

echo "‚úì Nalezeno " . count($chargingStations) . " nab√≠jec√≠ch stanic\n\n";

// Test 2: Detailn√≠ anal√Ωza p≈ôesnosti
echo "2. ANAL√ùZA P≈òESNOSTI MAPY.COM API\n";
echo "=================================\n";

$accurateMatches = 0;
$totalTested = 0;
$results = [];

foreach ($chargingStations as $i => $station) {
    $stationId = $station->ID;
    $title = $station->post_title;
    $dbLat = (float) get_post_meta($stationId, '_db_lat', true);
    $dbLng = (float) get_post_meta($stationId, '_db_lng', true);
    $dbAddress = get_post_meta($stationId, '_db_address', true);
    
    if ($dbLat == 0 && $dbLng == 0) continue;
    
    $totalTested++;
    
    echo "--- Stanice " . ($i + 1) . ": {$title} ---\n";
    echo "DB GPS: {$dbLat}, {$dbLng}\n";
    echo "DB Adresa: {$dbAddress}\n";
    
    // Test Mapy.com API
    $mapyStations = $chargingService->findChargingStations($dbLat, $dbLng, 1000, 5);
    
    if (empty($mapyStations)) {
        echo "‚ùå Mapy.com nenalezla ≈æ√°dn√© stanice\n\n";
        continue;
    }
    
    $bestMatch = null;
    $bestScore = 0;
    
    foreach ($mapyStations as $mapyStation) {
        $mapyLat = $mapyStation['coords']['lat'] ?? 0;
        $mapyLng = $mapyStation['coords']['lon'] ?? 0; // Mapy.com pou≈æ√≠v√° 'lon', ne 'lng'
        $mapyAddress = $mapyStation['address'];
        $mapyName = $mapyStation['name'];
        
        // V√Ωpoƒçet vzd√°lenosti
        $distance = calculateDistance($dbLat, $dbLng, $mapyLat, $mapyLng);
        
        // Porovn√°n√≠ adres
        $addressComparison = compareAddresses($dbAddress, $mapyAddress);
        
        // Sk√≥re shody (0-100)
        $score = 0;
        
        // GPS p≈ôesnost (max 50 bod≈Ø)
        if ($distance <= 50) {
            $score += 50; // Perfektn√≠ shoda
        } elseif ($distance <= 100) {
            $score += 40; // Velmi dobr√° shoda
        } elseif ($distance <= 200) {
            $score += 25; // Dobr√° shoda
        } elseif ($distance <= 500) {
            $score += 10; // Slab√° shoda
        }
        
        // Shoda adres (max 30 bod≈Ø)
        if ($addressComparison['is_match']) {
            $score += 30;
        } else {
            $score += ($addressComparison['similarity'] / 100) * 15; // ƒå√°steƒçn√° shoda
        }
        
        // Shoda n√°zvu (max 20 bod≈Ø)
        $nameSimilarity = 0;
        similar_text(strtolower($title), strtolower($mapyName), $nameSimilarity);
        $score += ($nameSimilarity / 100) * 20;
        
        if ($score > $bestScore) {
            $bestScore = $score;
            $bestMatch = [
                'mapy_station' => $mapyStation,
                'distance' => $distance,
                'address_comparison' => $addressComparison,
                'name_similarity' => $nameSimilarity,
                'score' => $score
            ];
        }
    }
    
    if ($bestMatch) {
        $match = $bestMatch['mapy_station'];
        $distance = $bestMatch['distance'];
        $score = $bestMatch['score'];
        
        echo "üó∫Ô∏è  Nejlep≈°√≠ shoda:\n";
        echo "   N√°zev: {$match['name']}\n";
        echo "   Adresa: {$match['address']}\n";
        echo "   GPS: {$match['coords']['lat']}, {$match['coords']['lon']}\n";
        echo "   Vzd√°lenost: " . round($distance) . "m\n";
        echo "   Sk√≥re shody: " . round($score, 1) . "/100\n";
        
        // Kontrola odkazu
        if (isset($match['deep_links']['mapy'])) {
            echo "   Mapy.cz odkaz: {$match['deep_links']['mapy']}\n";
        }
        
        // Kontrola raw dat pro URL
        if (isset($match['raw']['url']) && !empty($match['raw']['url'])) {
            echo "   üîó URL odkaz: {$match['raw']['url']}\n";
        }
        
        // Rozhodnut√≠ o pou≈æitelnosti
        $isUsable = $distance <= 200 && $score >= 60;
        
        if ($isUsable) {
            echo "   ‚úÖ POU≈ΩITELN√â (vzd√°lenost ‚â§200m, sk√≥re ‚â•60)\n";
            $accurateMatches++;
        } else {
            echo "   ‚ùå NEPOU≈ΩITELN√â (vzd√°lenost >200m nebo sk√≥re <60)\n";
        }
        
        $results[] = [
            'db_title' => $title,
            'db_lat' => $dbLat,
            'db_lng' => $dbLng,
            'db_address' => $dbAddress,
            'mapy_title' => $match['name'],
            'mapy_lat' => $match['coords']['lat'],
            'mapy_lng' => $match['coords']['lon'],
            'mapy_address' => $match['address'],
            'distance' => $distance,
            'score' => $score,
            'is_usable' => $isUsable
        ];
    }
    
    echo "\n";
}

echo "\n\n";

// Test 3: Shrnut√≠ v√Ωsledk≈Ø
echo "3. SHRNUT√ç V√ùSLEDK≈Æ\n";
echo "===================\n";

echo "üìä Celkov√© v√Ωsledky:\n";
echo "   Celkem otestov√°no: {$totalTested}\n";
echo "   Pou≈æiteln√© shody: {$accurateMatches}\n";
echo "   √öspƒõ≈°nost: " . ($totalTested > 0 ? round(($accurateMatches / $totalTested) * 100, 1) : 0) . "%\n\n";

if (!empty($results)) {
    echo "üìã Detailn√≠ v√Ωsledky:\n";
    foreach ($results as $result) {
        $status = $result['is_usable'] ? '‚úÖ' : '‚ùå';
        echo "   {$status} {$result['db_title']}\n";
        echo "      Vzd√°lenost: " . round($result['distance']) . "m, Sk√≥re: " . round($result['score'], 1) . "\n";
        echo "      DB: {$result['db_address']}\n";
        echo "      Mapy: {$result['mapy_address']}\n";
    }
}

echo "\n\n";

// Test 4: Kontrola URL odkaz≈Ø v Mapy.com odpovƒõdi
echo "4. KONTROLA URL ODKAZ≈Æ V MAPY.COM\n";
echo "==================================\n";

$testStation = $chargingStations[0];
$testLat = (float) get_post_meta($testStation->ID, '_db_lat', true);
$testLng = (float) get_post_meta($testStation->ID, '_db_lng', true);

echo "Testov√°n√≠ na stanici: {$testStation->post_title}\n";
echo "GPS: {$testLat}, {$testLng}\n\n";

// P≈ô√≠m√© vol√°n√≠ Mapy.com API pro kontrolu raw odpovƒõdi
$apiKey = get_option('db_mapy_api_key');
if (!empty($apiKey)) {
    $params = [
        'query' => 'nab√≠jec√≠ stanice',
        'type' => 'poi',
        'lang' => 'cs',
        'limit' => 3,
        'preferNear' => $testLng . ',' . $testLat,
        'preferNearPrecision' => 1000,
        'apikey' => $apiKey
    ];
    
    $url = 'https://api.mapy.com/v1/geocode?' . http_build_query($params);
    
    echo "üîç API URL: " . $url . "\n\n";
    
    $response = wp_remote_get($url, [
        'timeout' => 10,
        'headers' => [
            'Accept' => 'application/json',
            'User-Agent' => 'DobityBaterky/Accuracy-Test'
        ]
    ]);
    
    if (!is_wp_error($response)) {
        $data = json_decode(wp_remote_retrieve_body($response), true);
        
        echo "üìã Raw odpovƒõƒè Mapy.com:\n";
        echo json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        
        echo "\n\nüîç Anal√Ωza URL odkaz≈Ø:\n";
        if (isset($data['items'])) {
            foreach ($data['items'] as $i => $item) {
                echo "--- Item " . ($i + 1) . " ---\n";
                echo "N√°zev: " . ($item['name'] ?? 'N/A') . "\n";
                
                // Kontrola v≈°ech mo≈æn√Ωch URL pol√≠
                $urlFields = ['url', 'website', 'link', 'href', 'web'];
                foreach ($urlFields as $field) {
                    if (isset($item[$field]) && !empty($item[$field])) {
                        echo "üîó {$field}: " . $item[$field] . "\n";
                    }
                }
                
                // Kontrola vno≈ôen√Ωch objekt≈Ø
                if (isset($item['details']) && is_array($item['details'])) {
                    foreach ($urlFields as $field) {
                        if (isset($item['details'][$field]) && !empty($item['details'][$field])) {
                            echo "üîó details.{$field}: " . $item['details'][$field] . "\n";
                        }
                    }
                }
                
                echo "\n";
            }
        }
    } else {
        echo "‚ùå Chyba API: " . $response->get_error_message() . "\n";
    }
} else {
    echo "‚ùå API Key nen√≠ nastaven\n";
}

echo "\n\n";

// Test 5: Doporuƒçen√≠
echo "5. DOPORUƒåEN√ç PRO POU≈ΩIT√ç\n";
echo "=========================\n";

$successRate = $totalTested > 0 ? ($accurateMatches / $totalTested) * 100 : 0;

if ($successRate >= 80) {
    echo "‚úÖ VYSOK√Å √öSPƒö≈†NOST ({$successRate}%)\n";
    echo "   Mapy.com API je vhodn√© pro automatick√© p≈ôi≈ôazov√°n√≠\n";
    echo "   Doporuƒçen√© prahov√© hodnoty: vzd√°lenost ‚â§200m, sk√≥re ‚â•60\n";
} elseif ($successRate >= 60) {
    echo "‚ö†Ô∏è  ST≈òEDN√ç √öSPƒö≈†NOST ({$successRate}%)\n";
    echo "   Mapy.com API je pou≈æiteln√© s manu√°ln√≠ kontrolou\n";
    echo "   Doporuƒçen√© prahov√© hodnoty: vzd√°lenost ‚â§100m, sk√≥re ‚â•70\n";
} else {
    echo "‚ùå N√çZK√Å √öSPƒö≈†NOST ({$successRate}%)\n";
    echo "   Mapy.com API nen√≠ vhodn√© pro automatick√© p≈ôi≈ôazov√°n√≠\n";
    echo "   Doporuƒçeno pou≈æ√≠t pouze pro vyhled√°v√°n√≠ v okol√≠\n";
}

echo "\n‚úÖ Test dokonƒçen!\n";
